# -*- coding: utf-8 -*-
"""Preco_Cafe_hw.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12DTQnBS0PMaYV-fioLozggzGZhnmvPDQ

## Montar o Google Drive
Este comando permite a integração do Colab com o Google Drive, facilitando a importação de arquivos
"""

from google.colab import drive
drive.mount('/content/drive')

"""## Importando as bibliotecas necessárias
Aqui, iremos importar as bibliotecas necessárias para a utilização do modelo Holt-Winters (HW) para a análise de dados do preço do café brasileiro
"""

# Importar as bibliotecas necessárias
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
import numpy as np
import seaborn as sns
from scipy import stats
import statsmodels.api as sm
from google.colab import files

"""## Importando a base de dados
Vamos carregar o arquivo (.csv) e definir sua leitura usando a função "read_csv"
"""

# Carregar o arquivo CSV
path = '/content/drive/MyDrive/DataScience/preco_cafe.csv' # Lembre-se de alterar o seu caminho
df = pd.read_csv(path)

"""## Manipulando a base
Aqui, nós iremos manipular a tabela para que possamos ter certeza de que os dados estão corretos
"""

# Exibir as primeiras linhas do dataframe para verificação
print(df.head())

# Verificar os nomes das colunas
print(df.columns)

"""## Conversão de tipos
Neste momento, nós faremos a conversão de tipo de dado para que não haja a ocorrência de valor nulo na nossa leitura e que a análise seja feita de maneira correta
"""

# Converter as colunas de meses para numérico,
# substituindo vírgulas por pontos e convertendo para float
for col in ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']:
    if col in df.columns:  # Verificar se a coluna existe no DataFrame
        df[col] = df[col].str.replace(',', '.').astype(float)

# Calcular a média anual dos preços do café
df['Media_Anual'] = df[['Jan', 'Fev', 'Mar', 'Abr',
                        'Mai', 'Jun', 'Jul', 'Ago',
                        'Set', 'Out', 'Nov', 'Dez']].mean(axis=1)

"""## Estatísticas Descritivas
Aqui vamos calcular as principais medidas descritivas
"""

# Estatística descritiva básica (como DataFrame)
estatistica_descritiva = df['Media_Anual'].describe().to_frame(name='Valor')
display(pd.DataFrame(estatistica_descritiva).style.set_caption("Estatística Descritiva das Médias Anuais dos Preços do Café"))

# Medidas adicionais de posição e dispersão
medidas_adicionais = {
    'Média': df['Media_Anual'].mean(),
    'Mediana': df['Media_Anual'].median(),
    'Moda': df['Media_Anual'].mode().values[0],
    'Variância': df['Media_Anual'].var(),
    'Desvio Padrão': df['Media_Anual'].std(),
    'Coeficiente de Variação (%)': df['Media_Anual'].std() / df['Media_Anual'].mean() * 100
}

# Converter para DataFrame
medidas_df = pd.DataFrame.from_dict(medidas_adicionais, orient='index', columns=['Valor'])
display(medidas_df.style.set_caption("Medidas de Posição e Dispersão"))

"""## Histograma
Aqui vamos fazer um histograma com os quartis
"""

# Calcular os quartis
q1 = df['Media_Anual'].quantile(0.25)
q2 = df['Media_Anual'].quantile(0.50)  # Mediana
q3 = df['Media_Anual'].quantile(0.75)

# Criar o histograma
plt.figure(figsize=(10, 6))
sns.histplot(df['Media_Anual'], bins=15, kde=True, color='skyblue', edgecolor='black')

# Adicionar linhas verticais para os quartis
plt.axvline(q1, color='orange', linestyle='--', linewidth=2, label=f'Q1 (25%): {q1:.2f}')
plt.axvline(q2, color='green', linestyle='--', linewidth=2, label=f'Q2 - Mediana (50%): {q2:.2f}')
plt.axvline(q3, color='red', linestyle='--', linewidth=2, label=f'Q3 (75%): {q3:.2f}')

# Personalizações
plt.title('Histograma das Médias Anuais dos Preços do Café com Quartis')
plt.xlabel('Preço Médio Anual')
plt.ylabel('Frequência')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig('grafico_histograma.png') # Save the figure
plt.show()

"""## Planejando a Regressão Linear"""

import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm

# Regressão linear (Preço em função do Tempo)
X = df['Ano']
y = df['Media_Anual']

# Adiciona constante para o modelo (intercepto)
X_const = sm.add_constant(X)
modelo = sm.OLS(y, X_const).fit()

# Valor de R²
r2 = modelo.rsquared

# Gráfico com linha de regressão
plt.figure(figsize=(10, 6))
sns.regplot(x='Ano', y='Media_Anual', data=df, ci=None, line_kws={"color": "red"})

# Título e rótulos
plt.title('Regressão Linear: Preço Médio Anual do Café em Função do Tempo')
plt.xlabel('Ano')
plt.ylabel('Preço Médio Anual')
plt.grid(True)

# Caixa com o valor de R²
plt.text(
    0.05, 0.95,  # posição relativa dentro do gráfico (eixo x, eixo y)
    f'$R^2$ = {r2:.4f}',
    transform=plt.gca().transAxes,  # usa coordenadas relativas ao eixo
    fontsize=12,
    bbox=dict(boxstyle='round,pad=0.3', edgecolor='black', facecolor='lightyellow')
)

# Exibir resumo da regressão linear
print("\nResumo da Regressão Linear:")
display(modelo.summary())
plt.savefig('grafico_regressao_linear.png') # Save the figure
plt.show()

"""## Visualizando a Regressão Polinomial
Muitas vezes, a RLS não é suficiente para a nossa análise. Desta forma, recorremos a outros tipos de Regressão. Neste caso, vamos utilizar uma Regressão Polinomial (RP)

A RP é utilizada quando a relação entre as variáveis - no nosso caso, "Preço" e "Tempo (Ano)" NÃO é linear.

Podemos perceber, pelo resultado do valor de R² que uma RP é mais satisfatória que uma RL
"""

# Variáveis
X = df['Ano']
y = df['Media_Anual']

# Criar variáveis polinomiais (grau 2)
X_poly = pd.DataFrame({
    'Ano': X,
    'Ano2': X**2
})

# Adiciona intercepto (constante)
X_poly_const = sm.add_constant(X_poly)

# Ajustar modelo polinomial grau 2
modelo_poly = sm.OLS(y, X_poly_const).fit()

# Obter valores preditos para o gráfico
anos_range = np.linspace(X.min(), X.max(), 100)
X_range_poly = pd.DataFrame({
    'Ano': anos_range,
    'Ano2': anos_range**2
})
X_range_poly_const = sm.add_constant(X_range_poly)
y_pred = modelo_poly.predict(X_range_poly_const)

# Plot
plt.figure(figsize=(10,6))
plt.scatter(X, y, color='blue', label='Dados Observados')
plt.plot(anos_range, y_pred, color='red', label='Regressão Polinomial Grau 2')

# Caixa com o R²
r2_poly = modelo_poly.rsquared
plt.text(
    0.05, 0.95,
    f'$R^2$ = {r2_poly:.4f}',
    transform=plt.gca().transAxes,
    fontsize=12,
    bbox=dict(boxstyle='round,pad=0.3', edgecolor='black', facecolor='lightyellow')
)

plt.title('Regressão Polinomial Grau 2: Preço Médio Anual do Café em Função do Tempo')
plt.xlabel('Ano')
plt.ylabel('Preço Médio Anual')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig('grafico_regressao_polinomial.png') # Save the figure
plt.show()

# Mostrar resumo do modelo
print(modelo_poly.summary())

"""## Visualizando graficamente a evolução dos preços do café"""

# Plotar a evolução da média do preço do café a cada ano
plt.figure(figsize=(10, 6))
plt.plot(df['Ano'], df['Media_Anual'], marker='o', linestyle='-')
plt.title('Evolução da Média Anual do Preço do Café (2014-2023)')
plt.xlabel('Ano')
plt.ylabel('Média do Preço da Saca de Café (R$)')
plt.grid(True)
plt.savefig('grafico_evolucao_preco.png') # Save the figure
plt.show()

"""## Aplicando o Modelo Holt-Winters"""

# Definir a série temporal da média anual
# Aqui usamos o pd.Index com dtype int para manter os anos corretamente
media_anual_ts = pd.Series(df['Media_Anual'].values, index=pd.Index(df['Ano'].values, dtype=int))

# Aplicar o modelo Holt-Winters, removendo sazonalidade devido a dados insuficientes
modelo_hw = sm.tsa.ExponentialSmoothing(media_anual_ts, trend='add').fit()

# Exibir as previsões
previsoes = modelo_hw.forecast(steps=5)
print("Previsões de Preços de Café para os Próximos 5 Anos:")
print(previsoes)

"""## Visualizando a evolução da previsão graficamente"""

# Plotar as médias anuais e as previsões do modelo Holt-Winters
plt.figure(figsize=(10, 6))
plt.plot(media_anual_ts.index, media_anual_ts.values, marker='o', label='Média Anual Observada')
plt.plot(previsoes.index + df['Ano'].iloc[-1], previsoes.values, marker='o', linestyle='--', color='red', label='Previsões Holt-Winters')
plt.title('Previsões Holt-Winters para Preços de Café')
plt.xlabel('Ano')
plt.ylabel('Média do Preço do Café')
plt.legend()
plt.grid(True)
plt.savefig('grafico_previsoes_hw.png') # Save the figure
plt.show()

"""## Vamos fazer uma Regressão dos valores da previsão para os próximos 5 anos"""

# Regressão das previsões Holt-Winters
# Vamos assumir que o índice das previsões é o ano (ano+1, ano+2, etc.)
anos_futuros = np.arange(df['Ano'].iloc[-1] + 1, df['Ano'].iloc[-1] + 6)  # Próximos 5 anos

# Dados de entrada para a regressão (ano vs previsão)
X_hw = anos_futuros
y_hw = previsoes.values

# Adicionando constante para a regressão (intercepto)
X_hw_const = sm.add_constant(X_hw)

# Modelo de regressão linear
modelo_hw_regressao = sm.OLS(y_hw, X_hw_const).fit()

# Exibindo o resumo da regressão
print("\nResumo da Regressão das Previsões Holt-Winters:")
display(modelo_hw_regressao.summary())

# Estatísticas descritivas das previsões
estatistica_previsao_hw = previsoes.describe().to_frame(name='Valor')
display(estatistica_previsao_hw.style.set_caption("Estatísticas Descritivas da Previsão Holt-Winters"))

# Para o PDF, transformando a estatística em string:
estatistica_previsao_hw_str = estatistica_previsao_hw.to_string()

"""## Visualizando graficamente a regressão da previsão"""

# Novo intervalo de anos (2024-2028)
anos_futuros = np.arange(2024, 2029)  # De 2024 até 2028 (inclusive)

# Usar o modelo Holt-Winters para prever os preços para os anos 2024-2028
previsoes = modelo_hw.forecast(steps=5)  # Prever 5 anos à frente (2024-2028)

# Atualizar o gráfico de regressão com essas previsões
plt.figure(figsize=(10, 6))

# Scatter plot das previsões para os anos futuros (2024-2028)
plt.scatter(anos_futuros, previsoes, color='blue', label='Previsões Holt-Winters')

# Linha de regressão para as previsões
plt.plot(anos_futuros, modelo_hw_regressao.fittedvalues, color='red', label='Regressão Linear')

# Calcular o valor de R² para a regressão
r2_hw = modelo_hw_regressao.rsquared

# Adicionar título e rótulos
plt.title('Regressão Linear das Previsões Holt-Winters para 2024-2028')
plt.xlabel('Ano')
plt.ylabel('Preço Médio Anual (R$)')
plt.legend()

# Adicionar a caixa com o valor de R² no gráfico
plt.text(
    0.05, 0.95,  # Posição relativa dentro do gráfico (x, y)
    f'$R^2$ = {r2_hw:.4f}',  # Valor do R²
    transform=plt.gca().transAxes,  # Coordenadas relativas ao eixo
    fontsize=12,
    bbox=dict(boxstyle='round,pad=0.3', edgecolor='black', facecolor='lightyellow')
)

# Mostrar o gráfico
plt.grid(True)
plt.tight_layout()

# Salvar o gráfico como imagem
plt.savefig('grafico_regressao_previsao_hw_2024_2028.png')

"""## Agora faremos as Estatísticas Descritivas das Previsões"""

# Estatísticas descritivas das previsões
estatistica_previsao_hw = previsoes.describe().to_frame(name='Valor')
display(estatistica_previsao_hw.style.set_caption("Estatísticas Descritivas da Previsão Holt-Winters"))

# Para o PDF, transformando a estatística em string:
estatistica_previsao_hw_str = estatistica_previsao_hw.to_string()

"""## Salvando os resultados
Para salvar os resultados precisamos instalar uma biblioteca que salve os resultados no formato PDF
"""

!pip install fpdf

from fpdf import FPDF

# --- 1. Salvar todos os gráficos como imagens ---

# Histograma
plt.figure(figsize=(10, 6))
sns.histplot(df['Media_Anual'], bins=15, kde=True, color='skyblue', edgecolor='black')
plt.axvline(q1, color='orange', linestyle='--', linewidth=2, label=f'Q1 (25%): {q1:.2f}')
plt.axvline(q2, color='green', linestyle='--', linewidth=2, label=f'Q2 - Mediana (50%): {q2:.2f}')
plt.axvline(q3, color='red', linestyle='--', linewidth=2, label=f'Q3 (75%): {q3:.2f}')
plt.title('Histograma das Médias Anuais dos Preços do Café com Quartis')
plt.xlabel('Preço Médio Anual')
plt.ylabel('Frequência')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig('grafico_histograma.png')
plt.close()

# Regressão Linear
plt.figure(figsize=(10, 6))
sns.regplot(x='Ano', y='Media_Anual', data=df, ci=None, line_kws={"color": "red"})
plt.title('Regressão Linear: Preço Médio Anual do Café em Função do Tempo')
plt.xlabel('Ano')
plt.ylabel('Preço Médio Anual')
plt.grid(True)
plt.text(
    0.05, 0.95,
    f'$R^2$ = {r2:.4f}',
    transform=plt.gca().transAxes,
    fontsize=12,
    bbox=dict(boxstyle='round,pad=0.3', edgecolor='black', facecolor='lightyellow')
)
plt.tight_layout()
plt.savefig('grafico_regressao_linear.png')
plt.close()

# Regressão Polinomial grau 2
plt.figure(figsize=(10,6))
plt.scatter(X, y, color='blue', label='Dados Observados')
plt.plot(anos_range, y_pred, color='red', label='Regressão Polinomial Grau 2')
plt.text(
    0.05, 0.95,
    f'$R^2$ = {r2_poly:.4f}',
    transform=plt.gca().transAxes,
    fontsize=12,
    bbox=dict(boxstyle='round,pad=0.3', edgecolor='black', facecolor='lightyellow')
)
plt.title('Regressão Polinomial Grau 2: Preço Médio Anual do Café em Função do Tempo')
plt.xlabel('Ano')
plt.ylabel('Preço Médio Anual')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig('grafico_regressao_polinomial.png')
plt.close()

# Evolução do preço anual
plt.figure(figsize=(10, 6))
plt.plot(df['Ano'], df['Media_Anual'], marker='o', linestyle='-')
plt.title('Evolução da Média Anual do Preço do Café (2014-2023)')
plt.xlabel('Ano')
plt.ylabel('Média do Preço da Saca de Café (R$)')
plt.grid(True)
plt.tight_layout()
plt.savefig('grafico_evolucao_preco.png')
plt.close()

# Previsões Holt-Winters
plt.figure(figsize=(10, 6))
plt.plot(media_anual_ts.index, media_anual_ts.values, marker='o', label='Média Anual Observada')
plt.plot(previsoes.index + df['Ano'].iloc[-1], previsoes.values, marker='o', linestyle='--', color='red', label='Previsões Holt-Winters')
plt.title('Previsões Holt-Winters para Preços de Café')
plt.xlabel('Ano')
plt.ylabel('Média do Preço do Café')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig('grafico_previsoes_hw.png')
plt.close()

# Regressão da previsão Holt-Winters (2024-2028)
# Ajustar para usar anos corretos
anos_futuros = np.arange(2024, 2029)
# Previsões já calculadas na variável previsoes
# Ajustar a regressão para esses dados
X_hw = pd.DataFrame({'Ano': anos_futuros})
X_hw_const = sm.add_constant(X_hw)
modelo_hw_regressao = sm.OLS(previsoes.values, X_hw_const).fit()

plt.figure(figsize=(10, 6))
plt.scatter(anos_futuros, previsoes.values, color='blue', label='Previsões Holt-Winters')
plt.plot(anos_futuros, modelo_hw_regressao.fittedvalues, color='red', label='Regressão Linear')
plt.title('Regressão Linear das Previsões Holt-Winters (2024-2028)')
plt.xlabel('Ano')
plt.ylabel('Preço Médio Anual (R$)')
plt.legend()
plt.text(
    0.05, 0.95,
    f'$R^2$ = {modelo_hw_regressao.rsquared:.4f}',
    transform=plt.gca().transAxes,
    fontsize=12,
    bbox=dict(boxstyle='round,pad=0.3', edgecolor='black', facecolor='lightyellow')
)
plt.grid(True)
plt.tight_layout()
plt.savefig('grafico_regressao_previsao_hw.png')
plt.close()


# --- 2. Preparar textos para o PDF ---

estatistica_str = estatistica_descritiva.to_string()
medidas_str = medidas_df.to_string()

estatistica_previsao_hw = previsoes.describe()
estatistica_previsao_hw_str = estatistica_previsao_hw.to_string()

# Sumários das regressões
summary_linear_str = modelo.summary().as_text()
summary_poly_str = modelo_poly.summary().as_text()
summary_hw_reg_str = modelo_hw_regressao.summary().as_text()


# --- 3. Criar PDF com FPDF ---

pdf = FPDF()
pdf.set_auto_page_break(auto=True, margin=15)

def add_text_title(pdf, text):
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, text, ln=True)
    pdf.ln(2)

def add_text_body(pdf, text, font_size=11):
    pdf.set_font("Arial", size=font_size)
    for line in text.split('\n'):
        pdf.cell(0, 6, line, ln=True)

# Página 1: Estatísticas descritivas gerais
pdf.add_page()
add_text_title(pdf, "Estatística Descritiva da Média Anual")
add_text_body(pdf, estatistica_str)

pdf.ln(5)
add_text_title(pdf, "Medidas de Posição e Dispersão")
add_text_body(pdf, medidas_str)

# Página 2: Estatísticas da previsão Holt-Winters
pdf.add_page()
add_text_title(pdf, "Estatística Descritiva da Previsão Holt-Winters (2024-2028)")
add_text_body(pdf, estatistica_previsao_hw_str)

# Página 3: Sumário da Regressão Linear
pdf.add_page()
add_text_title(pdf, "Resumo da Regressão Linear")
pdf.set_font("Courier", size=8)
add_text_body(pdf, summary_linear_str, font_size=8)

# Página 4: Sumário da Regressão Polinomial
pdf.add_page()
add_text_title(pdf, "Resumo da Regressão Polinomial Grau 2")
pdf.set_font("Courier", size=8)
add_text_body(pdf, summary_poly_str, font_size=8)

# Página 5: Sumário da Regressão da Previsão Holt-Winters
pdf.add_page()
add_text_title(pdf, "Resumo da Regressão das Previsões Holt-Winters (2024-2028)")
pdf.set_font("Courier", size=8)
add_text_body(pdf, summary_hw_reg_str, font_size=8)

# Páginas de gráficos
imagens = [
    ('Histograma das Médias Anuais dos Preços do Café com Quartis', 'grafico_histograma.png'),
    ('Regressão Linear: Preço Médio Anual do Café em Função do Tempo', 'grafico_regressao_linear.png'),
    ('Regressão Polinomial Grau 2: Preço Médio Anual do Café em Função do Tempo', 'grafico_regressao_polinomial.png'),
    ('Evolução da Média Anual do Preço do Café (2014-2023)', 'grafico_evolucao_preco.png'),
    ('Previsões Holt-Winters para Preços de Café', 'grafico_previsoes_hw.png'),
    ('Regressão Linear das Previsões Holt-Winters (2024-2028)', 'grafico_regressao_previsao_hw.png'),
]

for titulo, img_path in imagens:
    pdf.add_page()
    add_text_title(pdf, titulo)
    pdf.image(img_path, w=180)
    pdf.ln(5)

# Salvar PDF
pdf_file_name = "relatorio_completo_preco_cafe.pdf"
pdf.output(pdf_file_name)

print(f"PDF gerado com sucesso: {pdf_file_name}")

# Para facilitar o download no Google Colab:
from google.colab import files
files.download(pdf_file_name)